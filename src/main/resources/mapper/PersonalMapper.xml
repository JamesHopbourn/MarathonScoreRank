<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="com.example.testm.mapper.PersonalMapper">
    <!--  查询个人整体数据  -->
    <select id="getPersonalData" resultType="com.example.testm.entity.Personal">
        SELECT personal_bib,
               personal_name,
               gender,
               record_time,
               net_time,
               gender_rank,
               overall_rank,
               avg_pace
        FROM   testm
        WHERE  record_time IS NOT NULL
        ORDER BY overall_rank;
    </select>

    <!--  查询重复净时间数据  -->
    <select id="findSameNetTime" resultType="com.example.testm.entity.Personal">
        SELECT *
        FROM   testm
        WHERE  net_time IN (SELECT net_time
                            FROM   testm
                            GROUP  BY net_time
                            HAVING Count(*) > 1)
        ORDER  BY net_time
    </select>

    <!--  查询队伍排名  -->
    <select id="getTeamRank" resultType="com.example.testm.entity.Team">
        SELECT result.team_name,result.net_time,
               ROW_NUMBER() over (ORDER BY result.net_time) AS 'rank'
        FROM   (SELECT team_name,
                       Max(record_time) AS 'net_time'
                FROM   testM
                GROUP  BY team_name) AS result
        ORDER  BY net_time;
    </select>

    <!--  根据性别查询成绩并排名  -->
    <select id="getPersonalRank" resultType="com.example.testm.entity.Personal">
        SELECT
               result.*,
               ROW_NUMBER() over (ORDER BY result.`net_time`,result.`video_rank`) AS 'rank'
        FROM    (
                    SELECT m1.`personal_bib`,
                           m1.`team_name`,
                           m1.`personal_name`,
                           m1.`gender`,
                           m1.`gender_rank`,
                           m1.`overall_rank`,
                           m1.`record_time`,
                           m1.`video_rank`,
                           COALESCE ((
                                         SELECT date_format(sec_to_time(timestampdiff(second,m2.record_time,m1.record_time)),'%H:%i:%s')
                                         FROM   testm AS m2
                                         WHERE  m2.`personal_bib` = m1.`personal_bib`-1
                                           AND    m1.`team_name` = m2.`team_name`),date_format(m1.`record_time`,'%H:%i:%s')) AS 'net_time',
                           COALESCE ((
                                         SELECT date_format(sec_to_time(timestampdiff(second,m2.record_time,m1.record_time)/#{distance}),'%i′%s″')
                                         FROM   testm AS m2
                                         WHERE  m2.`personal_bib` = m1.`personal_bib`-1
                                           AND    m1.`team_name` = m2.`team_name`),date_format(sec_to_time(time_to_sec(m1.`record_time`)/#{distance}),'%i′%s″')) AS 'avg_pace'
                    FROM   testm m1) AS result
        WHERE gender LIKE #{gender} AND record_time IS NOT NULL
        ORDER BY net_time
    </select>

    <!-- 批量更新性别分组成绩 -->
    <update id="updateGenderRank" parameterType="java.util.List">
        <foreach collection="list" item="item" index="index" open="" close="" separator=";">
            update testM
            <set>
                gender_rank=${item.rank}
            </set>
            where personal_bib = ${item.personal_bib}
        </foreach>
    </update>

    <!--  批量更新个人成绩  -->
    <update id="updateOverallRank" parameterType="java.util.List">
        <foreach collection="list" item="item" index="index" open="" close="" separator=";">
            UPDATE testM
            <set>
                avg_pace = #{item.avg_pace},
                net_time = #{item.net_time},
                overall_rank = #{item.rank}
            </set>
            WHERE personal_bib = #{item.personal_bib}
        </foreach>
    </update>
</mapper>